問題と解決

Q. デーモンとして動かすにはどうするか
A. -cオプションでビジーループを実現すればその間は死なないらしい。
しかしどうやってポーリングするのかが問題。
+clientserverではサーバ側でリクエストを受けたかを判定する方法がない？(remote_peek()でできる？)

ptyを使えばどうにかできるのかもしれない。
またWindowsではどうなのか調べてない。

Q. serveridとは何か
A. remote_read()やserver2client()などの「読む」
関数が使うサーバのID。
expand('<client>')によって、
またはRemoteReply中のexpand('<amatch>')によって得られる。

A. RemoteReplyとはどんなイベントか
クライアント側が設定する。
サーバとして働くVimからの応答を受け取ったとき。
expand('<amatch>')によってserveridを得られる。
(クライアント側もサーバから「読む」必要がある)

Q. remote_send()の使い勝手が悪い
A. なるべくremote_expr()を使うべき。
式しか書けないが、関数を定義すれば
Exコマンドを式として呼び出せる。



直接的な解決法とその問題点

Q. デーモンとして動かすのが難しいならサーバで実行させて
結果をクライアントに送って死ぬのはどうか
A. (やってない)

Q. `mps#__mpsserver__#run()`みたいなのを実行させて、
標準出力が端末じゃなくてもOKなようにするのはどうか
A. Vimスクリプトでサーバ側がクライアントから
リクエストを受けたかを判定する方法がない。

Q. --remote-exprで式を指定して標準出力に吐かせて、
それをなんらかの方法で取得したらどうか
A. (やってない)



サーバはブロッキングする式を実行している必要がある。
しかしクライアントからのリクエストをVimスクリプトレベルで
検知する手段がないのでブロッキングする式の中で
クライアントからのリクエストをポーリングすることは不可能。

そこでふとデーモンとして動かすのが難しいなら
逆にしてしまえばどうかと思いついた。
つまり本来のサーバがクライアント側の開始を待つ形になる。

処理の流れ (うまくいかない)
1. サーバ: クライアントが結果が欲しいタイミングまで
サーバがremote_expr()でブロッキングしながら待つ。
2. クライアント: サーバからRemoteReplyを受けるものの
その場では処理せずserveridだけ覚えておく。
3. サーバ: クライアントがやっと結果をほしいと言って
server2client()でサーバ名を送る。
4. クライアント: サーバはもらったサーバ名にremote_expr()で結果を送る。
役目を終えてサーバは死ぬ。
5. サーバ: クライアントも結果を受け取り終了。

しかし1の時点で結果はわかっているんだから
remote_expr()では結果を送ればいいと気付いた。

処理の流れ2 (うまくいかない)
1. サーバ: クライアントが結果が欲しいタイミングまで
サーバがremote_expr()でブロッキングしながら待つ。
remote_expr()は結果を送っている。
2. クライアント: サーバからRemoteReplyを受けるものの
その場では処理せずserveridと結果を受け取る。
3. サーバ: 役目を終えて死ぬ。
4. クライアント: やっと結果が必要になったので使う。

ここまできてremote_expr()がブロッキングしないことに気付いた。
あとRemoteReplyはクライアントが用意するもので、逆だと思ってた。
(ていうかこれsleep中でも渡って結果を返してる？
これもしかしかしたらすごいことできそう)

処理の流れ3 (うまくいかない)
1. サーバ: ダミーのリクエストを送り、
remote_read()してブロッキングしながら待つ。
2. クライアント: リクエストを返さず必要な時まで持つ。
3. クライアント: 必要な時が来たので返す。
4. サーバ: 計算し始める...あれ？意味なくね？

処理の流れ4 (うまくいかない)
1. サーバ: クライアントが結果が欲しいタイミングまで
サーバがremote_expr()でブロッキングしながら待つ。
remote_expr()は結果を送っている。
2. クライアント: サーバからリクエストを受けるが
処理を延期...できたっけ？

さっき気付いたremote_expr()がブロッキングしない件を使ってやってみる。

処理の流れ5
1. サーバ: whileとsleepによってブロッキングする。
2. クライアント: remote_expr()で結果を取得。
3. クライアント: サーバをkill



remote_expr()は結果を受け取るまでブロッキングするので
Vimが処理を終えるまで死ぬことはない。
Cometに似ているような気がする。


サーバ側で関数が定義してあるんだから
クライアントから「remote_expr(servername, 'F()')」
すればいけるんじゃないかとも思ったが結局無理だった。
それまでサーバが生きていなければならない。




その他

remote_expr()はブロッキングしてても大丈夫なみたい？
じゃあいける？
